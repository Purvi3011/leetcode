class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        return buildTree(inorder,0,inorder.length-1,postorder,0,postorder.length-1);
    }
    private TreeNode buildTree(int[] inorder,int inStart,int inEnd,int[] postorder,int postStart,int postEnd){
        if(inStart > inEnd || postStart > postEnd) return null;
        int rootval = postorder[postEnd];
        TreeNode root = new TreeNode(rootval);
        int rootindex = 0;
        for(int i = inStart; i <= inEnd;i++){
            if(inorder[i] == rootval){
                rootindex = i ;
                break;
            }
        }
        int leftSize = rootindex - inStart;
        int rightSize = inEnd - rootindex;
        root.left =  buildTree(inorder,inStart,rootindex-1,postorder,postStart,postStart+leftSize-1);
        root.right = buildTree(inorder,rootindex+1,inEnd,postorder,postEnd-rightSize,postEnd-1);
        return root;
    }
}
