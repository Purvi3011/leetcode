/*
// Definition for a QuadTree node.
class Node {
    public boolean val;
    public boolean isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;

    
    public Node() {
        this.val = false;
        this.isLeaf = false;
        this.topLeft = null;
        this.topRight = null;
        this.bottomLeft = null;
        this.bottomRight = null;
    }
    
    public Node(boolean val, boolean isLeaf) {
        this.val = val;
        this.isLeaf = isLeaf;
        this.topLeft = null;
        this.topRight = null;
        this.bottomLeft = null;
        this.bottomRight = null;
    }
    
    public Node(boolean val, boolean isLeaf, Node topLeft, Node topRight, Node bottomLeft, Node bottomRight) {
        this.val = val;
        this.isLeaf = isLeaf;
        this.topLeft = topLeft;
        this.topRight = topRight;
        this.bottomLeft = bottomLeft;
        this.bottomRight = bottomRight;
    }
};
*/

class Solution {
    public Node construct(int[][] grid) {
        return helper(grid,0,0,grid.length);
    }

    private Node helper(int[][] grid , int i , int j , int len){
        Node root = new Node(grid[i][j] == 1 , true , null , null , null , null);
        if(len == 1){
            return root ;
        }
        int half = len/2 ;
        Node topLeft = helper(grid,i,j,half);
        Node topRight = helper(grid,i,j+half,half);
        Node bottomLeft = helper(grid,i+half,j,half);
        Node bottomRight = helper(grid,i+half,j+half,half);

        if(!topLeft.isLeaf || !topRight.isLeaf || !bottomLeft.isLeaf || !bottomLeft.isLeaf || topLeft.val != topRight.val || topRight.val != bottomRight.val || bottomRight.val != bottomLeft.val){
            root.topLeft = topLeft;
            root.topRight = topRight;
            root.bottomLeft = bottomLeft;
            root.bottomRight = bottomRight;
            root.isLeaf = false;
        }
        return root;
    }
}
